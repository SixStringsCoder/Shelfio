import pytest
from mixer.backend.django import mixer
from collection.models import collection_upload_handler
pytestmark = pytest.mark.django_db

class TestCollectible:
    def test_init(self):
        collectible = mixer.blend('collection.Collectible')
        assert collectible.pk == 1, 'The collectible did not save. There was no instance.'

    def test_str_method(self):
        collectible = mixer.blend('collection.Collectible')
        assert isinstance(str(collectible.name), str) == True, 'This must be a string'


class TestCollection:
    def test_init(self):
        collection = mixer.blend('collection.Collection')
        assert collection.pk == 1, 'The collection did not save. There was no instance.'

    def test_str_method(self):
        collection = mixer.blend('collection.Collectible')
        assert isinstance(str(collection.name), str) == True, 'This must be a string'

    # def test_collection_upload_handler(self):
    #     collection = mixer.blend('collection.name', name='stamps')
    #     image = mixer.blend('collection.image', collection=collection)
    #     result = collection_upload_handler(instance=image, filename='stamp_image.jpg')
    #     assert isinstance(result, str) is True, 'must return a string'
    #     assert result == "stamps/owner.jpg", 'incorrect path generated by handler.'